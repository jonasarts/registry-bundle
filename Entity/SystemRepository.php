<?php

namespace jonasarts\Bundle\RegistryBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SystemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SystemRepository extends EntityRepository
{
    public function findAllOrderedBySystemKey()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT s FROM jaRegistryBundle:System s ORDER BY s.systemkey ASC, s.name ASC')
            ->getResult();
    }
    
    public function findAllWhere($column, $operator, $value)
    {
        $repository = $this->getEntityManager()->getRepository('jaRegistryBundle:System');
        
        $query = $repository->createQueryBuilder('s')
            ->where('s.'.$column.' '.$operator.' :param1')
            ->setParameter('param1', $value)
            ->orderBy('s.systemkey', 'ASC')
            ->orderBy('s.name', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @var string $path A system key path. Can be a partial string, placeholder is %
     */
    public function findByPath($path)
    {
        $repository = $this->getEntityManager()->getRepository('jaRegistryBundle:System');
        
        $query = $repository->createQueryBuilder('s')
            ->where('s.systemkey LIKE :param1')
            ->setParameter('param1', $path)
            ->orderBy('s.systemkey', 'ASC')
            ->orderBy('s.name', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Load system keys by a path.
     */
    public function loadByPath($path)
    {
        $repository = $this->getEntityManager()->getRepository('jaRegistryBundle:System');

        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare(
            'SELECT * FROM system s1
            WHERE s1.systemkey LIKE :path'
            );
        
        $params = array('path' => $path);
        $stmt->execute($params);

        $result = array();

        while ($row = $stmt->fetch()) {
            $s = new System();
            $s->LoadByArray($row);
            $result[] = $s;
        }

        return $result;
    }
}
