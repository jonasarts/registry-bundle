<?php

/*
 * This file is part of the Registry bundle package.
 *
 * (c) Jonas Hauser <symfony@jonasarts.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace jonasarts\Bundle\RegistryBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RegistryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegistryRepository extends EntityRepository
{
    public function findAllOrderedByRegistryKey()
    {
        return $this->getEntityManager()
        ->createQuery('SELECT r FROM RegistryBundle:Registry r ORDER BY r.registrykey ASC, r.name ASC')
        ->getResult();
    }
    
    public function findAllWhere($column, $operator, $value)
    {
        $repository = $this->getEntityManager()->getRepository('RegistryBundle:Registry');
        
        $query = $repository->createQueryBuilder('r')
        ->where('r.'.$column.' '.$operator.' :param1')
        ->setParameter('param1', $value)
        ->orderBy('r.registrykey', 'ASC')
        ->orderBy('r.name', 'ASC')
        ->getQuery();

        return $query->getResult();
    }

    /**
     * @var integer $userid A user id to load registry keys for.
     * @var string $path A registry key path. Can be a partial string, placeholder is %.
     */
    public function findByPath($userid, $path)
    {
        $repository = $this->getEntityManager()->getRepository('RegistryBundle:Registry');
        
        $query = $repository->createQueryBuilder('r')
        ->where('r.userid = :param1 AND r.registrykey LIKE :param2')
        ->setParameters(array('param1' => $userid, 'param2' => $path))
        ->orderBy('r.registrykey', 'ASC')
        ->orderBy('r.name', 'ASC')
        ->getQuery();

        return $query->getResult();
    }

    /**
     * Load and merge registry keys by userid and a path.
     * The user keys will get merged with the default keys (userid = 0).
     */
    public function loadByPath($userid, $path)
    {
        $repository = $this->getEntityManager()->getRepository('RegistryBundle:Registry');
        
        /*
        select * from
        (select * from registry
        where userid = 0
        and concat(registrykey, "/", name) not in (select concat(registrykey, "/", name) from registry where userid = 2)
        union
        select * from registry
        where userid = 2) x
        where x.registrykey like 'App/Test/J%'
        */

        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare(
            'SELECT r.* FROM
            (
                SELECT * FROM registry r1
                WHERE r1.userid = 0
                AND CONCAT(r1.registrykey, "/", r1.name) NOT IN (
                    SELECT CONCAT(r2.registrykey, "/", r2.name) FROM registry r2 WHERE r2.userid = :userid
                )
                UNION
                SELECT * FROM registry r3
                WHERE r3.userid = :userid
            ) r
            WHERE r.registrykey LIKE :path'
            );
        
        $params = array('userid' => $userid, 'path' => $path);
        $stmt->execute($params);

        $result = array();

        while ($row = $stmt->fetch()) {
            $r = new Registry();
            $r->LoadByArray($row);
            $result[] = $r;
        }

        return $result;
    }
}
